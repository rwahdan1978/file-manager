{"ast":null,"code":"import * as S3 from 'aws-sdk/clients/s3';\nlet serviceConfigOptions = {\n  accessKeyId: environment.accessKeyId,\n  secretAccessKey: environment.secretAccessKey,\n  region: 'ap-south-1'\n};\nconst bucket = new S3(serviceConfigOptions);\n//for simplicity. In prod, use loadConfigFromFile, or env variables, or if logged in using \n// var s3 = new AWS.S3({ region: \"sa-east-1\" }); //region can be set in here\n// var params = {\n//   Bucket: 'angular-upload-files-2023-2024',\n//   Key: 'test222.txt',\n//   Body: \"HelloWorld\"\n// };\n// bucket.putObject(params, function (err, res) {\n//   if (err) {\n//       console.log(\"Error uploading data: \", err);\n//   } else {\n//       console.log(\"Successfully uploaded data to myBucket/myKey\");\n//   }\n// });","map":{"version":3,"mappings":"AAEA,OAAO,KAAKA,EAAE,MAAM,oBAAoB;AAaxC,IAAIC,oBAAoB,GAAiC;EACjDC,WAAW,EAAEC,WAAW,CAACD,WAAW;EACpCE,eAAe,EAAED,WAAW,CAACC,eAAe;EAC5CC,MAAM,EAAE;CACf;AAED,MAAMC,MAAM,GAAG,IAAIN,EAAE,CAACC,oBAAoB,CAAC;AAE3C;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","names":["S3","serviceConfigOptions","accessKeyId","environment","secretAccessKey","region","bucket"],"sourceRoot":"","sources":["C:\\Users\\ramit\\OneDrive\\Documents\\GitHub\\Photos\\file-manager2\\src\\app\\s3-service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\r\nimport * as AWS from 'aws-sdk/global';\r\nimport * as S3 from 'aws-sdk/clients/s3';\r\nimport { Observable } from 'rxjs';\r\nimport { env } from 'process';\r\nimport { ServiceConfigurationOptions } from 'aws-sdk/lib/service';\r\n\r\n<<<<<<< HEAD\r\n// AWS.config.update({\r\n//         accessKeyId: environment.accessKeyId,\r\n//         secretAccessKey: environment.secretAccessKey,\r\n//         region: 'ap-south-1',\r\n//         AWS_SDK_LOAD_CONFIG=1\r\n// });\r\n\r\nlet serviceConfigOptions : ServiceConfigurationOptions = {\r\n        accessKeyId: environment.accessKeyId,\r\n        secretAccessKey: environment.secretAccessKey,\r\n        region: 'ap-south-1',\r\n};\r\n\r\nconst bucket = new S3(serviceConfigOptions);\r\n\r\n//for simplicity. In prod, use loadConfigFromFile, or env variables, or if logged in using \r\n\r\n// var s3 = new AWS.S3({ region: \"sa-east-1\" }); //region can be set in here\r\n\r\n// var params = {\r\n//   Bucket: 'angular-upload-files-2023-2024',\r\n//   Key: 'test222.txt',\r\n//   Body: \"HelloWorld\"\r\n// };\r\n\r\n// bucket.putObject(params, function (err, res) {\r\n//   if (err) {\r\n//       console.log(\"Error uploading data: \", err);\r\n//   } else {\r\n//       console.log(\"Successfully uploaded data to myBucket/myKey\");\r\n//   }\r\n// });\r\n\r\n=======\r\nlet serviceConfigOptions : ServiceConfigurationOptions = {\r\n        accessKeyId: process.env.accessKeyId,\r\n        secretAccessKey: process.env.secretAccessKey,\r\n        region: 'ap-south-1',\r\n};\r\n\r\nconst bucket = new S3(serviceConfigOptions);\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class S3Service {\r\n\r\n  bucketName: string = 'angular-upload-files-2023-2024'\r\n  loader: EventEmitter<boolean> = new EventEmitter<boolean>()\r\n  currentFolder: string = '';\r\n\r\n  constructor() { }\r\n\r\n  getFolderContent(): Observable<any> {\r\n    return new Observable((observer) => {\r\n      this.loader.next(true);\r\n      bucket.listObjectsV2({ Bucket: this.bucketName, Prefix: this.currentFolder, Delimiter: '/' }, (err: AWS.AWSError, data: S3.ListObjectsV2Output) => {\r\n        this.loader.next(false);\r\n        console.log(data)\r\n        if (err) {\r\n          observer.error(err);\r\n        }\r\n        else {\r\n          let list: any[] = [];\r\n          list = list.concat(data.CommonPrefixes?.map(m => { return { name: m.Prefix, contentType: 'folder' } }));\r\n          list = list.concat(data.Contents?.filter(m => m.Key != this.currentFolder).map(m => { return { name: m.Key, contentType: 'file', modifiedTime: m.LastModified?.toDateString() } }));\r\n          observer.next(list);\r\n        }\r\n\r\n      });\r\n    })\r\n\r\n  }\r\n\r\n  getUrl(key:string): Observable<any> {\r\n    return new Observable((observer) => {\r\n      this.loader.next(true);\r\n      bucket.getSignedUrl('getObject',{ Bucket: this.bucketName, Key:key,Expires:60*5 }, (err: Error, url: string) => {\r\n        this.loader.next(false);\r\n        if (err) {\r\n          observer.error(err);\r\n        }\r\n        else {\r\n          observer.next(url);\r\n        }\r\n\r\n      });\r\n    })\r\n\r\n  }\r\n\r\n  createFolder(folderName:string): Observable<any> {\r\n    return new Observable((observer) => {\r\n      this.loader.next(true);\r\n      bucket.putObject({ Bucket: this.bucketName, Key:this.currentFolder+folderName+'/' }, (err: AWS.AWSError, data: S3.PutObjectOutput) => {\r\n        this.loader.next(false);\r\n        if (err) {\r\n          observer.error(err);\r\n        }\r\n        else {\r\n          observer.next(data);\r\n        }\r\n      });\r\n    })\r\n\r\n  }\r\n\r\n  upload(file:any): Observable<any> {\r\n    return new Observable((observer) => {\r\n      this.loader.next(true);\r\n      bucket.upload({ Bucket: this.bucketName, Key:this.currentFolder+file.name,Body:file }, (err: Error, data: S3.ManagedUpload.SendData) => {\r\n        this.loader.next(false);\r\n        if (err) {\r\n          observer.error(err);\r\n        }\r\n        else {\r\n          observer.next(data);\r\n        }\r\n      });\r\n    })\r\n\r\n  }\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}