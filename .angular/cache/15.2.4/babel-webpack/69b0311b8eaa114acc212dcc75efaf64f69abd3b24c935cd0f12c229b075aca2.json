{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as AWS from 'aws-sdk/global';\nimport * as S3 from 'aws-sdk/clients/s3';\nimport { Observable } from 'rxjs';\nimport { environment } from '../environments/environment.prod';\nimport * as i0 from \"@angular/core\";\n//import { ServiceConfigurationOptions } from 'aws-sdk/lib/service';\nlet env = environment;\nAWS.config.update({\n  accessKeyId: process.env.accessKeyId,\n  secretAccessKey: process.env.secretAccessKey,\n  region: 'ap-south-1'\n});\nconst bucket = new S3(AWS.config);\nexport let S3Service = /*#__PURE__*/(() => {\n  class S3Service {\n    constructor() {\n      this.bucketName = 'angular-upload-files-2023-2024';\n      this.loader = new EventEmitter();\n      this.currentFolder = '';\n    }\n    getFolderContent() {\n      return new Observable(observer => {\n        this.loader.next(true);\n        bucket.listObjectsV2({\n          Bucket: this.bucketName,\n          Prefix: this.currentFolder,\n          Delimiter: '/'\n        }, (err, data) => {\n          this.loader.next(true);\n          console.log(data);\n          if (err) {\n            observer.error(err);\n          } else {\n            let list = [];\n            list = list.concat(data.CommonPrefixes?.map(m => {\n              return {\n                name: m.Prefix,\n                contentType: 'folder'\n              };\n            }));\n            list = list.concat(data.Contents?.filter(m => m.Key != this.currentFolder).map(m => {\n              return {\n                name: m.Key,\n                contentType: 'file',\n                modifiedTime: m.LastModified?.toDateString()\n              };\n            }));\n            observer.next(list);\n          }\n        });\n      });\n    }\n    getUrl(key) {\n      return new Observable(observer => {\n        this.loader.next(true);\n        bucket.getSignedUrl('getObject', {\n          Bucket: this.bucketName,\n          Key: key,\n          Expires: 60 * 5\n        }, (err, url) => {\n          this.loader.next(false);\n          if (err) {\n            observer.error(err);\n          } else {\n            observer.next(url);\n          }\n        });\n      });\n    }\n    createFolder(folderName) {\n      return new Observable(observer => {\n        this.loader.next(true);\n        bucket.putObject({\n          Bucket: this.bucketName,\n          Key: this.currentFolder + folderName + '/'\n        }, (err, data) => {\n          this.loader.next(false);\n          if (err) {\n            observer.error(err);\n          } else {\n            observer.next(data);\n          }\n        });\n      });\n    }\n    upload(file) {\n      return new Observable(observer => {\n        this.loader.next(true);\n        bucket.upload({\n          Bucket: this.bucketName,\n          Key: this.currentFolder + file.name,\n          Body: file\n        }, (err, data) => {\n          this.loader.next(false);\n          if (err) {\n            observer.error(err);\n          } else {\n            observer.next(data);\n          }\n        });\n      });\n    }\n  }\n  S3Service.ɵfac = function S3Service_Factory(t) {\n    return new (t || S3Service)();\n  };\n  S3Service.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: S3Service,\n    factory: S3Service.ɵfac,\n    providedIn: 'root'\n  });\n  return S3Service;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}