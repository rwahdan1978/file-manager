{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as AWS from 'aws-sdk/global';\nimport * as S3 from 'aws-sdk/clients/s3';\nimport { Observable } from 'rxjs';\nimport { environments } from '../environments/enviroment';\nimport * as i0 from \"@angular/core\";\nAWS.config.update({\n  accessKeyId: environments.aws.AWS_ACCESS_KEY_ID,\n  secretAccessKey: environments.aws.AWS_SECRET_ACCESS_KEY,\n  region: environments.aws.AWS_DEFAULT_REGION ////'ap-south-1'\n});\n\nconst bucket = new S3(AWS.config);\nexport class S3Service {\n  constructor() {\n    this.bucketName = 'angular-upload-files-2023-2024';\n    this.loader = new EventEmitter();\n    this.currentFolder = 'FamilyDocuments/';\n  }\n  getFolderContent() {\n    return new Observable(observer => {\n      this.loader.next(false);\n      bucket.listObjectsV2({\n        Bucket: this.bucketName,\n        Prefix: this.currentFolder,\n        Delimiter: '/'\n      }, (err, data) => {\n        this.loader.next(false);\n        //console.log(data)\n        if (err) {\n          observer.error(err);\n        } else {\n          let list = [];\n          list = list.concat(data.CommonPrefixes?.map(m => {\n            return {\n              name: '',\n              contentType: 'folder'\n            };\n          }));\n          list = list.concat(data.Contents?.filter(m => m.Key != this.currentFolder).map(m => {\n            return {\n              name: m.Key,\n              contentType: 'file',\n              modifiedTime: m.LastModified?.toDateString()\n            };\n          }));\n          observer.next(list);\n        }\n      });\n    });\n  }\n  getUrl(key) {\n    return new Observable(observer => {\n      this.loader.next(true);\n      bucket.getSignedUrl('getObject', {\n        Bucket: this.bucketName,\n        Key: key,\n        Expires: 60 * 5\n      }, (err, url) => {\n        this.loader.next(false);\n        if (err) {\n          observer.error(err);\n        } else {\n          observer.next(url);\n        }\n      });\n    });\n  }\n  createFolder(folderName) {\n    return new Observable(observer => {\n      this.loader.next(true);\n      bucket.putObject({\n        Bucket: this.bucketName,\n        Key: this.currentFolder + folderName + '/'\n      }, (err, data) => {\n        this.loader.next(false);\n        if (err) {\n          observer.error(err);\n        } else {\n          observer.next(data);\n        }\n      });\n    });\n  }\n  upload(file) {\n    return new Observable(observer => {\n      this.loader.next(true);\n      bucket.upload({\n        Bucket: this.bucketName,\n        Key: this.currentFolder + file.name,\n        Body: file\n      }, (err, data) => {\n        this.loader.next(false);\n        if (err) {\n          observer.error(err);\n        } else {\n          observer.next(data);\n        }\n      });\n    });\n  }\n}\nS3Service.ɵfac = function S3Service_Factory(t) {\n  return new (t || S3Service)();\n};\nS3Service.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: S3Service,\n  factory: S3Service.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","AWS","S3","Observable","environments","config","update","accessKeyId","aws","AWS_ACCESS_KEY_ID","secretAccessKey","AWS_SECRET_ACCESS_KEY","region","AWS_DEFAULT_REGION","bucket","S3Service","constructor","getFolderContent","observer","loader","next","listObjectsV2","Bucket","bucketName","Prefix","currentFolder","Delimiter","err","data","error","list","concat","CommonPrefixes","map","m","name","contentType","Contents","filter","Key","modifiedTime","LastModified","toDateString","getUrl","key","getSignedUrl","Expires","url","createFolder","folderName","putObject","upload","file","Body","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ramit\\OneDrive\\Documents\\GitHub\\Photos\\file-manager2\\src\\app\\s3-service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\r\nimport * as AWS from 'aws-sdk/global';\r\nimport * as S3 from 'aws-sdk/clients/s3';\r\nimport { Observable } from 'rxjs';\r\nimport { environments } from '../environments/enviroment'\r\n\r\nAWS.config.update({\r\n  accessKeyId: environments.aws.AWS_ACCESS_KEY_ID,\r\n  secretAccessKey: environments.aws.AWS_SECRET_ACCESS_KEY,\r\n  region: environments.aws.AWS_DEFAULT_REGION ////'ap-south-1'\r\n});\r\n\r\nconst bucket = new S3(AWS.config);\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class S3Service {\r\n\r\n  bucketName: string = 'angular-upload-files-2023-2024';\r\n  loader: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  currentFolder: string = 'FamilyDocuments/';\r\n\r\n  constructor() {}\r\n\r\n  getFolderContent(): Observable<any> {\r\n    return new Observable((observer) => {\r\n      this.loader.next(false);\r\n      bucket.listObjectsV2({ Bucket: this.bucketName, Prefix: this.currentFolder, Delimiter: '/' }, (err: AWS.AWSError, data: S3.ListObjectsV2Output) => {\r\n        this.loader.next(false);\r\n        //console.log(data)\r\n        if (err) {\r\n          observer.error(err);\r\n        }\r\n        else {\r\n          let list: any[] = [];\r\n          list = list.concat(data.CommonPrefixes?.map(m => { return { name: '', contentType: 'folder' } }));\r\n          list = list.concat(data.Contents?.filter(m => m.Key != this.currentFolder).map(m => { return { name: m.Key, contentType: 'file', modifiedTime: m.LastModified?.toDateString() } }));\r\n          observer.next(list);\r\n        }\r\n\r\n      });\r\n    })\r\n\r\n  }\r\n\r\n  getUrl(key:string): Observable<any> {\r\n    return new Observable((observer) => {\r\n      this.loader.next(true);\r\n      bucket.getSignedUrl('getObject',{ Bucket: this.bucketName, Key:key,Expires:60*5 }, (err: Error, url: string) => {\r\n        this.loader.next(false);\r\n        if (err) {\r\n          observer.error(err);\r\n        }\r\n        else {\r\n          observer.next(url);\r\n        }\r\n\r\n      });\r\n    })\r\n\r\n  }\r\n\r\n  createFolder(folderName:string): Observable<any> {\r\n    return new Observable((observer) => {\r\n      this.loader.next(true);\r\n      bucket.putObject({ Bucket: this.bucketName, Key:this.currentFolder+folderName+'/' }, (err: AWS.AWSError, data: S3.PutObjectOutput) => {\r\n        this.loader.next(false);\r\n        if (err) {\r\n          observer.error(err);\r\n        }\r\n        else {\r\n          observer.next(data);\r\n        }\r\n      });\r\n    })\r\n\r\n  }\r\n\r\n  upload(file:any): Observable<any> {\r\n    return new Observable((observer) => {\r\n      this.loader.next(true);\r\n      bucket.upload({ Bucket: this.bucketName, Key:this.currentFolder+file.name,Body:file }, (err: Error, data: S3.ManagedUpload.SendData) => {\r\n        this.loader.next(false);\r\n        if (err) {\r\n          observer.error(err);\r\n        }\r\n        else {\r\n          observer.next(data);\r\n        }\r\n      });\r\n    })\r\n\r\n  }\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}