{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as AWS from 'aws-sdk/global';\nimport * as S3 from 'aws-sdk/clients/s3';\nimport { environment } from '../environments/environment';\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nAWS.config.update({\n  accessKeyId: environment.accessKeyId,\n  secretAccessKey: environment.secretAccessKey,\n  region: 'ap-south-1'\n});\nconst bucket = new S3(AWS.config);\n//for simplicity. In prod, use loadConfigFromFile, or env variables, or if logged in using \n// var s3 = new AWS.S3({ region: \"sa-east-1\" }); //region can be set in here\nexport class S3Service {\n  constructor() {\n    this.bucketName = 'angular-upload-files-2023-2024';\n    this.loader = new EventEmitter();\n    this.currentFolder = '';\n  }\n  onInit() {\n    var params = {\n      Bucket: 'angular-upload-files-2023-2024',\n      Key: 'properties2023/1.png',\n      Body: \"HelloWorld\"\n    };\n    bucket.getObject(params, function (err, res) {\n      if (err) {\n        console.log(\"Error uploading data: \", err);\n      } else {\n        console.log(\"Successfully uploaded data to myBucket/myKey\");\n      }\n    });\n  }\n  getUrl(key) {\n    return new Observable(observer => {\n      this.loader.next(true);\n      bucket.getSignedUrl('getObject', {\n        Bucket: this.bucketName,\n        Key: key,\n        Expires: 60 * 5\n      }, (err, url) => {\n        this.loader.next(false);\n        if (err) {\n          observer.error(err);\n        } else {\n          observer.next(url);\n        }\n      });\n    });\n  }\n  createFolder(folderName) {\n    return new Observable(observer => {\n      this.loader.next(true);\n      bucket.putObject({\n        Bucket: this.bucketName,\n        Key: this.currentFolder + folderName + '/'\n      }, (err, data) => {\n        this.loader.next(false);\n        if (err) {\n          observer.error(err);\n        } else {\n          observer.next(data);\n        }\n      });\n    });\n  }\n  upload(file) {\n    return new Observable(observer => {\n      this.loader.next(true);\n      bucket.upload({\n        Bucket: this.bucketName,\n        Key: this.currentFolder + file.name,\n        Body: file\n      }, (err, data) => {\n        this.loader.next(false);\n        if (err) {\n          observer.error(err);\n        } else {\n          observer.next(data);\n        }\n      });\n    });\n  }\n}\nS3Service.ɵfac = function S3Service_Factory(t) {\n  return new (t || S3Service)();\n};\nS3Service.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: S3Service,\n  factory: S3Service.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","AWS","S3","environment","Observable","config","update","accessKeyId","secretAccessKey","region","bucket","S3Service","constructor","onInit","params","Bucket","Key","Body","getObject","err","res","console","log","getUrl","key","observer","loader","next","getSignedUrl","bucketName","Expires","url","error","createFolder","folderName","putObject","currentFolder","data","upload","file","name","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ramit\\OneDrive\\Documents\\GitHub\\Photos\\file-manager2\\src\\app\\s3-service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\r\nimport * as AWS from 'aws-sdk/global';\r\nimport * as S3 from 'aws-sdk/clients/s3';\r\nimport { environment } from '../environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { env } from 'process';\r\n\r\nAWS.config.update({\r\n        accessKeyId: environment.accessKeyId,\r\n        secretAccessKey: environment.secretAccessKey,\r\n        region: 'ap-south-1'\r\n});\r\n\r\nconst bucket = new S3(AWS.config);\r\n\r\n//for simplicity. In prod, use loadConfigFromFile, or env variables, or if logged in using \r\n\r\n// var s3 = new AWS.S3({ region: \"sa-east-1\" }); //region can be set in here\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class S3Service {\r\n\r\n  bucketName: string = 'angular-upload-files-2023-2024'\r\n  loader: EventEmitter<boolean> = new EventEmitter<boolean>()\r\n  currentFolder: string = '';\r\n\r\n  constructor() { }\r\n\r\n  onInit() {\r\n    var params = {\r\n      Bucket: 'angular-upload-files-2023-2024',\r\n      Key: 'properties2023/1.png',\r\n      Body: \"HelloWorld\"\r\n    };\r\n    \r\n    bucket.getObject(params, function (err, res) {\r\n      if (err) {\r\n          console.log(\"Error uploading data: \", err);\r\n      } else {\r\n          console.log(\"Successfully uploaded data to myBucket/myKey\");\r\n      }\r\n    });\r\n    \r\n\r\n  }\r\n\r\n  getUrl(key:string): Observable<any> {\r\n    return new Observable((observer) => {\r\n      this.loader.next(true);\r\n      bucket.getSignedUrl('getObject',{ Bucket: this.bucketName, Key:key,Expires:60*5 }, (err: Error, url: string) => {\r\n        this.loader.next(false);\r\n        if (err) {\r\n          observer.error(err);\r\n        }\r\n        else {\r\n          observer.next(url);\r\n        }\r\n\r\n      });\r\n    })\r\n\r\n  }\r\n\r\n  createFolder(folderName:string): Observable<any> {\r\n    return new Observable((observer) => {\r\n      this.loader.next(true);\r\n      bucket.putObject({ Bucket: this.bucketName, Key:this.currentFolder+folderName+'/' }, (err: AWS.AWSError, data: S3.PutObjectOutput) => {\r\n        this.loader.next(false);\r\n        if (err) {\r\n          observer.error(err);\r\n        }\r\n        else {\r\n          observer.next(data);\r\n        }\r\n      });\r\n    })\r\n\r\n  }\r\n\r\n  upload(file:any): Observable<any> {\r\n    return new Observable((observer) => {\r\n      this.loader.next(true);\r\n      bucket.upload({ Bucket: this.bucketName, Key:this.currentFolder+file.name,Body:file }, (err: Error, data: S3.ManagedUpload.SendData) => {\r\n        this.loader.next(false);\r\n        if (err) {\r\n          observer.error(err);\r\n        }\r\n        else {\r\n          observer.next(data);\r\n        }\r\n      });\r\n    })\r\n\r\n  }\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}